= Test Example =

== Code Example ==

[source,xml]
----
<html>
<body> <!--<1>-->

</body> <!--<2>-->
</html>
----

<1> Opening the body element.
<2> Closing the body element.
	

******************************************************************************

.Android USB Host Mode

* API Overview
* Android Manifest Requirements
* Working with devices
* Discovering a device
* Obtaining permission to communicate with a device
* Communicating with a device
* Terminating communication with a device

.API Overview

The +android.hardware.usb+ package contains the following classes supporting USB host mode:

+UsbManager+::
Allows you to enumerate and communicate with connected USB devices.

+UsbDevice+::
Represents a connected USB device and contains methods to access its identifying information, interfaces, and endpoints.

+UsbInterface+::
Represents an interface of a USB device, which defines a set of functionality for the device. A device can have one or more interfaces on which to communicate on.

+UsbEndpoint+::
Represents an interface endpoint, which is a communication channel for this interface. An interface can have one or more endpoints, and usually has input and output endpoints for two-way communication with the device.

+UsbDeviceConnection+::
Represents a connection to the device, which transfers data on endpoints. This class allows you to send data back and forth sychronously or asynchronously.

+UsbRequest+::
Represents an asynchronous request to communicate with a device through a UsbDeviceConnection.

+UsbConstants+::
Defines USB constants that correspond to definitions in +linux/usb/ch9.h+ of the Linux kernel.

In general, you:

. Obtain a +UsbManager+ to retrieve the desired +UsbDevice+
. Find the appropriate +UsbInterface+ and the +UsbEndpoint+ of that interface to communicate on
. Open a +UsbDeviceConnection+ to communicate with the USB device

[role="handout"]
--
'''

In most situations, you need to use all of these classes (+UsbRequest+ is only required if you are doing asynchronous communication) when communicating with a USB device.

--


.Using the Manifest to Require USB Support

Not all Android-powered devices are guaranteed to support the USB host APIs.

To indicate that your application requires USB host support, add the following elements to your application's manifest:

* Include a +<uses-feature>+ element that declares that your application uses the +android.hardware.usb.host+ feature:
+
	<uses-feature android:name="android.hardware.usb.host" />

* Set the minimum SDK of the application to API Level 12 or higher. The USB host APIs are not present on earlier API levels.
+
	<uses-sdk android:minSdkVersion="12" />


.Working with Devices

When users connect USB devices to an Android-powered device, the Android system can determine whether your application is interested in the connected device. If so, you can set up communication with the device if desired.

To do this, your application has to:

. Discover connected USB devices either by:
* Using an intent filter to be notified when the user connects a USB device, or
* Enumerating USB devices that are already connected.

. Ask the user for permission to connect to the USB device, if not already obtained.

. Communicate with the USB device by reading and writing data on the appropriate interface endpoints.


.Discovering a Device Using an Intent Filter, The Manifest

To have your application discover a particular USB device, you can specify an intent filter to filter for the +android.hardware.usb.action.USB_DEVICE_ATTACHED+ intent.

* Along with this intent filter, you need to specify a resource file that specifies properties of the USB device, such as product and vendor ID.

* When users connect a device that matches your device filter, the system presents them with a dialog that asks if they want to start your application.

* If users accept, your application automatically has permission to access the device until the device is disconnected.

In your activity, you can obtain the +UsbDevice+ that represents the attached device from the intent like this:

	UsbDevice device = (UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);

The following example shows how to declare the intent filter in your application's manifest:

[source,xml]
----
<activity ...>
	...
	<intent-filter>
		<action android:name="android.hardware.usb.action.USB_DEVICE_ATTACHED" />
	</intent-filter>

	<meta-data android:name="android.hardware.usb.action.USB_DEVICE_ATTACHED"
		android:resource="@xml/device_filter" />
</activity>
----

The +<meta-data>+ element points to an external XML resource file that declares identifying information about the device that you want to detect.

.Discovering a Device Using an Intent Filter, The Resource File

In the XML resource file, declare +<usb-device>+ elements for the USB devices that you want to filter. 

* The +<usb-device>+ element supports the following optional attributes:

** +vendor-id+
** +product-id+
** +class+
** +subclass+
** +protocol+ (device or interface)

* In general, use vendor and product ID if you want to filter for a specific device; use class, subclass, and protocol if you want to filter for a group of USB devices, such as mass storage devices or digital cameras.

* For example, the following resource file specifies that any USB device with the corresponding vendor ID and product ID should be filtered. These IDs are specific to the device and are specified by the device's manufacturer:
+
[source,xml]
----
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <usb-device vendor-id="1234" product-id="5678" />
</resources>
----

Save the resource file in your application's +res/xml/+ directory.

* The resource file name (without the +.xml+ extension) must be the same as the one you specified in the +<meta-data>+ element.

* For example, the resource file for the manifest shown previously should be saved in +res/xml/device_filter.xml+.


.Enumerating USB Devices

If your application is interested in inspecting all of the USB devices currently connected while your application is running, it can enumerate devices on the bus.

* Use the +UsbManager.getDeviceList()+ method to get a hash map of all the USB devices that are connected.

* The hash map is keyed by the USB device's name if you want to obtain a device from the map.

[source,java]
----
UsbManager manager = (UsbManager) getSystemService(Context.USB_SERVICE);
// ...  
HashMap<String, UsbDevice> deviceList = manager.getDeviceList();
UsbDevice device = deviceList.get("deviceName");
----

If desired, you can also just obtain an iterator from the hash map and process each device one by one:

[source,java]
----
UsbManager manager = (UsbManager) getSystemService(Context.USB_SERVICE);
// ...
HashMap<String, UsbDevice> deviceList = manager.getDeviceList();
Iterator<UsbDevice> deviceIterator = deviceList.values().iterator();
while (deviceIterator.hasNext()) {
	UsbDevice device = deviceIterator.next()
	// ...
}
----


.Obtaining Permission to Communicate With a Device

Before communicating with the USB device, your application must have permission from your users.

NOTE: If your application uses an intent filter to discover USB devices as they're connected, it automatically receives permission if the user allows your application to handle the intent. If not, you must request permission explicitly in your application before connecting to the device.

Explicitly asking for permission might be necessary in some situations such as when your application enumerates USB devices that are already connected and then wants to communicate with one.

* You must check for permission to access a device before trying to communicate with it.
* If not, you will receive a runtime error if the user denied permission to access the device.

To explicitly obtain permission:

. Call +UsbManager.requestPermission()+.
. The call to +requestPermission()+ displays a dialog to the user asking for permission to connect to the device.
. The system generates a broadcast intent with a boolean +EXTRA_PERMISSION_GRANTED+ extra indicating the user's response.

The following sample code shows how to create a broadcast receiver to process the response:

[source,java]
----
private static final String ACTION_USB_PERMISSION = "com.android.example.USB_PERMISSION";

private final BroadcastReceiver mUsbReceiver = new BroadcastReceiver() {

    public void onReceive(Context context, Intent intent) {
        String action = intent.getAction();
        if (ACTION_USB_PERMISSION.equals(action)) {
            synchronized (this) {
                UsbDevice device = (UsbDevice)intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);

                if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {
                    if (device != null) {
                      // Call method to set up device communication
                   }
                } 
                else {
                    Log.d(TAG, "permission denied for device " + device);
                }
            }
        }
    }
};
----

To register the broadcast receiver, add this in your +onCreate()+ method in your activity:

[source,java]
----
IntentFilter filter = new IntentFilter(ACTION_USB_PERMISSION);
registerReceiver(mUsbReceiver, filter);
----

To display the dialog that asks users for permission to connect to the device, call the +UsbManager.requestPermission()+ method:

[source,java]
----
UsbManager mUsbManager = (UsbManager) getSystemService(Context.USB_SERVICE);
UsbDevice device;
// ...
mPermissionIntent = PendingIntent.getBroadcast(this, 0, new Intent(ACTION_USB_PERMISSION), 0);
mUsbManager.requestPermission(device, mPermissionIntent);
----


.Communicating With a Device

Communication with a USB device can be either synchronous or asynchronous.

*  In either case, you should create a new thread on which to carry out all data transmissions, so you don't block the UI thread.

To properly set up communication with a device, you need to obtain the appropriate +UsbInterface+ and +UsbEndpoint+ of the device that you want to communicate on and send requests on this endpoint with a +UsbDeviceConnection+. In general, your code should:

* Check a +UsbDevice+ object's attributes, such as product ID, vendor ID, or device class to figure out whether or not you want to communicate with the device.

* When you are certain that you want to communicate with the device, find the appropriate +UsbInterface+ that you want to use to communicate along with the appropriate +UsbEndpoint+ of that interface.
** Interfaces can have one or more endpoints, and commonly will have an input and output endpoint for two-way communication.

* When you find the correct endpoint, open a +UsbDeviceConnection+ on that endpoint.

* Supply the data that you want to transmit on the endpoint with the +bulkTransfer()+ or +controlTransfer()+ method.
** You should carry out this step in another thread to prevent blocking the main UI thread.

The following code snippet is a trivial way to do a synchronous data transfer. Your code should have more logic to correctly find the correct interface and endpoints to communicate on and also should do any transferring of data in a different thread than the main UI thread:

[source,java]
----
private byte[] bytes = "hello usb".getBytes();
private static int TIMEOUT = 0;
private boolean forceClaim = true;

...

UsbInterface intf = device.getInterface(0);
UsbEndpoint endpoint = intf.getEndpoint(0);
UsbDeviceConnection connection = mUsbManager.openDevice(device); 
connection.claimInterface(intf, forceClaim);
connection.bulkTransfer(endpoint, bytes, bytes.length, TIMEOUT); // Do in another thread
----

To send data asynchronously, use the +UsbRequest+ class to initialize and queue an asynchronous request, then wait for the result with +requestWait()+.


.Terminating Communication With a Device

When you are done communicating with a device or if the device was detached, close the +UsbInterface+ and +UsbDeviceConnection+ by calling +releaseInterface()+ and +close()+.

To listen for detached events, create a broadcast receiver like below:

[source,java]
----
BroadcastReceiver mUsbReceiver = new BroadcastReceiver() {
    public void onReceive(Context context, Intent intent) {
        String action = intent.getAction(); 

      if (UsbManager.ACTION_USB_DEVICE_DETACHED.equals(action)) {
            UsbDevice device = (UsbDevice)intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);
            if (device != null) {
                // call your method that cleans up and closes communication with the device
            }
        }
    }
};
----

Creating the broadcast receiver within the application, and not the manifest, allows your application to handle detached events only while it is running.

* This way, detached events are sent only to the application that is currently running and not broadcast to all applications.

****************************************************************************
