[[Android_Stack]]

Android Stack
=============

image::images/AndroidStack-Splash.png[]

Android Stack Objectives
------------------------

The Android technology stack can be divided into four layers. This module provides an overview of each layer and the role it plays in the Android platform.

Topics in this module include:

* Design philosophy
* Open Source licenses
* Linux kernel space
* Native layer
* Dalvik VM
* Application layer
* Apps

== Design Philosophy: Why is Android put together the way it is? ==

.Design and Engineering
image::images/Booster-Steam-Engine.jpg[]

*Mobile platform* that runs on *many different devices* needs to be friendly for the entire ecosystem.

That includes:

* Device manufacturers
* Network carriers
* App developers
* End users

== Not All Open Source is Created Equal ==
.Open Source
image::images/open_source_logo.png[]

Open source implies availability of source code, not the right to reuse it or modify it. 

== Open Source Licenses ==
.Open Source Licenses
image::images/OpenSourceLicenses.svg[]


Android Stack - The Big Picture
-------------------------------
.Android Stack
image::images/AndroidStack/AndroidStack.svg[]


== Android Stack - The Details ==
.Android Stack Details
image::images/Android_Stack.svg[]


Linux Kernel Space
------------------
.Android Stack: Linux Kernel Layer
image::images/AndroidStack/AndroidStack-Linux.svg[align="right", width="50%"]

Android is based on a modified Linux kernel, which provides features such as:

* A permission-based security model
* Memory management
* Process management
* A network stack
* A device driver model

Native Layer
------------
.Android Stack: Native Layer
image::images/AndroidStack/AndroidStack-NativeLayer.svg[align="right", width="50%"]

The Android native layer contains:

* A custom +libc+ implementation called _Bionic_
* Custom libraries for Android features
* Third-party open-source libraries such as WebKit, SQLite, OpenGL, etc.
* Linux daemons managing system features such as telephony, networking, sensors, etc.
* Auxiliary Linux executables

NOTE: Android exposes only a small subset of native libraries to application developers through Android's http://developer.android.com/sdk/ndk/index.html[Native Development Kit (NDK)].


Dalvik Virtual Machine
----------------------
.Dalvik versus Java
image::images/Stack-Dalvik-Java.png[align="right"]

Android applications execute in a _Dalvik_ virtual machine (VM).

* The Dalvik VM was custom designed for the Android environment; it is not based on the Java VM.
* The Dalvik VM executes files in the Dalvik Executable (+.dex+) format.
* Each application process hosts its own Dalvik VM, ensuring strict sandboxing of applications.

Android supports Java as the primary application development language.

* The Android SDK includes the +dx+ tool, which compiles Java bytecode to Dalvik bytecode.
* The Android Development Tool (ADT) plugin to Eclipse is pre-configured to generate Dalvik bytecode from your Java source.

.Dalvik license plate
image::images/Dalvik-LicensePlate.png[align="center"]



Application Layer
-----------------
.Android Stack: Application Framework
image::images/AndroidStack/AndroidStack-ApplicationFramework.svg[align="right", width="50%"]

The application framework layer implements Android's Java language API for application development. It includes:

* Classes for implementing application components
* "Manager" classes for accessing Android system services such as Bluetooth, cameras, sensors, WiFi, etc.
* "Wrapper" classes for native libraries such as OpenGL and SQLite
* Most standard Java SE packages
* Auxiliary packages such as JSON and XML parsers and the Apache HTTP Client


Apps
----
.Android Stack: Applications
image::images/AndroidStack/AndroidStack-Applications.svg[align="right", width="50%"]

The application layer consists of pre-installed _system applications_ and user-installed applications.

* System and user-installed applications have the same structure and are built on the same application framework layer.
* System applications have access to some private framework APIs not exposed to third-party application developers.
* System applications can't be uninstalled by the user.

Application Structure
---------------------

You distribute an Android application as a single file, known as an _application package_ or _APK_, containing:

* Dalvik executable code compiled from your Java source code
* Resources, such as images, audio/video clips, as well as numerous XML files describing layouts, language packs, and so on
* Optional native shared libraries, compiled from C/C++ source code using Android's NDK.

APKs must be signed with a security certificate before they can be installed on a device.

* During development, you'll use an automatically-generated debug certificate.
* For production, you'll use a self-signed certificate that you generate.
+
NOTE: Google recommends a validity period of at least 25 years.

User-installed applications can provide the same functionality as most system applications.

* For example, there are several third-party browser applications available.
* Android allows the user to select one of these "replacement" applications as a default for actions like viewing a web page or sending an email.


Quiz
----

. What are the major levels of the Android stack?
. How is Android different than Ubuntu?
. What is the license for Linux kernel?
. How is Android Linux kernel different than mainline kernel?
. What are some of the components that go into the native layer?
. What is Dalvik and how is it different than JVM?
. What are the components of the Android framework?
. What does API level specify in the context of the stack?
. What is the difference between system and user apps?


Summary of Android Stack
------------------------

The goal of this module was to provide high level overview of the entire Android OS. 


By now, you should be able to explain significance and purpose of:

* Linux kernel space
* Native layer
* Dalvik VM
* Application layer
* Apps
