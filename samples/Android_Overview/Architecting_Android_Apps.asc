[[Architecting_Android_Apps]]

Architecting Android Apps Overview
==================================

image::images/DesignPatterns.jpg[]

Architecting Android Apps Overview
----------------------------------
The goal of this module is to introduce you to main components used to create Android apps. By the end of this module, you should have a good idea what Android app building blocks are, and their key properties.

Seven iterations of an app:

[options="incremental"]
* Part 1 - Activities and Android UI
* Part 2 - Intents, Action Bar, and More
* Part 3 - Services
* Part 4 - Content Providers
* Part 5 - Lists and Adapters
* Part 6 - Broadcast Receivers
* Part 7 - App Widgets

Yamba
-----
.Yamba
image::images/Yamba-Splash.png[]

=== Objectives of Yamba

The objective of this module is to explain how to go about designing a typical Android app. You will have a chance to see an example app, Yamba, using most of the standard Android building blocks. By the end of this talk, you should have high-level understanding about designing an Android app.


Yamba Approach
--------------

Yamba Overview::

* Yamba: Yet Another Micro-Blogging App
* Comprehensive Android example application.
* Works with services that support Twitter API.

Project Philosophy::

* Small increments - build it organically
* App must always run - whole and complete
* Refactor when needed - do simplest thing first


Part 1 - Activities and Android UI
----------------------------------

.Yamba Part 1
image::images/Yamba/Yamba-1.svg[]

Activity Overview
-----------------
.Example of Activities
image::images/Activities.png[align="center"]

* An activity is roughly a screen.
* A typical application may have many activities.
* Activities are typically expensive and so are managed by the system.

Activity Lifecycle
------------------
.Activity Lifecycle
image::images/ActivityLifecycle.png[align="center"]

* Activities are highly managed by the system's ActivityManager.
* ActivityManager drives the activity through its states.
* You as an app developer get to say what happens on transitions.

Activity Lifecycle Explored
---------------------------



[options="incremental"]
.Starting for the first time
----
D/ActivityDemo( 6708): onCreate
D/ActivityDemo( 6708): onStart
D/ActivityDemo( 6708): onResume
----

[options="incremental"]
.Opening another activity, then clicking Back button
----
...
D/ActivityDemo( 6708): onClickAnotherActivity
D/ActivityDemo( 6708): onPause
D/ActivityDemo( 6708): onStop
D/ActivityDemo( 6708): onRestart
D/ActivityDemo( 6708): onStart
D/ActivityDemo( 6708): onResume

----

[options="incremental"]
.Rotating the screen
----
...
D/ActivityDemo( 6708): onPause
D/ActivityDemo( 6708): onStop
D/ActivityDemo( 6708): onDestroy
D/ActivityDemo( 6708): onCreate
D/ActivityDemo( 6708): onStart
D/ActivityDemo( 6708): onResume
----

[options="incremental"]
.Pressing Home button
----
...
D/ActivityDemo( 6708): onPause
D/ActivityDemo( 6708): onStop
----

[options="incremental"]
.Restarting form the StatusBar
----
...
D/ActivityDemo( 6708): onRestart
D/ActivityDemo( 6708): onStart
D/ActivityDemo( 6708): onResume
----


Activity Template
-----------------

.ActivityDemo.java
[source,java]
----
include::code/LifecycleDemo/src/com/marakana/android/lifecycle/ActivityDemo.java[]
----


Activity Callbacks
------------------

=== Lifecycle

`onCreate()`::
Used to setup your activity. You will almost always have to have it. Good place to inflate the UI and setup listeners.

`onResume()` and `onPause()`::
Use them to turn on and off things that you'd like to have running only while the activity is visible. This is important for things that consume a lot of battery, such as GPS and sensors.

`onStart()` and `onStop()`::
Use to setup code that starts/stops the activity. Unlike `onResume()` and `onPause()`, it includes Paused state as well.

`onRestart()`::
Called when the activity is restarted. It is followed by `onStart()` and `onResume()`.

`onDistroy()`::
A good place to do any cleanup before the activity is cleaned up from memory. This is the counter-part to `onCreate()`.

=== Other

`onCreateOptionsMenu()` and `onOptionsItemSelected()`::
Use them to setup your menu. `onOptionsItemSelected()` loads the menu, typically from an XML resource. `onOptionsItemSelected()` is called whenever an option menu item is clicked on.

Various listeners and event handlers, such as `onClick()`::
Used to handle the UI events.

Registering Activity
--------------------

=== Main Activity

Register the activity in the Android Manifest file:

.Android Manifest file
[source,xml]
----
...
<activity
  android:name=".ActivityDemo"
  android:label="@string/app_name">
  <intent-filter>
    <action android:name="android.intent.action.MAIN" />
    <category android:name="android.intent.category.LAUNCHER" />
  </intent-filter>
</activity>
...
----

The intent filter specifies that this activity is to be the main entry point into the application as well as that it should be shown in the app launcher on home screen.

=== Any other activity

.Android Manifest file
[source,xml]
----
...
<activity android:name=".AnotherActivity"></activity>
...
----

Building Android UI
-------------------

There are two approaches to building Android UI:

=== Declaratively
* Declare UI in XML
* Eclipse provides nice drag-n-drop tools
* Inflate the XML views in Java

=== Programmatically
* Instantiate all widgets programmatically
* Set properties for each

The best is to use both:

. Star with declaring the look and feel using XML
. Inflate XML into Java
. Finish by programming the actions using Java

Layouts and Views
-----------------
.Layouts and Views
image::images/LayoutsAndViews.png[]



Part 2 - Intents, Action Bar, and More
--------------------------------------

.Yamba Part 2
image::images/Yamba/Yamba-2.svg[]



Intent Overview
---------------
.Example of Intents
image::images/Intents.png[align="center"]

* Intents are like events or messages.
* You can use them so start activities, start/stop services, or send broadcasts.
* Intents can be implicit or explicit.


Using Intents
-------------

`startActivity()`::
Starts an activity specified by the intent. If activity does not exist already, it calls `onCreate()` to create it. Otherwise, it calls `onStart()` and `onResum()`.

`startService()`::
Starts a service. Even if the service is not created yet, it called `onCreate()` on the service first.

`stopService()`::
Stops a service that is already running. If service is not running, it does nothing.

`bindService()`::
Binds to a service. Requires that the service returns a binder via `onBind()` method.

`sendBroadcast()`::
Sends a broadcast. If there's a broadcast receiver registered to filter for the same action as this intent is specifying, that receiver's `onReceive()` method will be called.

Explicit and Implicit Intents
-----------------------------

=== Explicit Intent

.ActivityDemo.java
[source,java]
----
...
startActivity(new Intent(this, AnotherActivity.class));
...
startService(new Intent(this, ServiceDemo.class));
...
----

`this` is the context from which this intent is being sent, in our case an Activity.

=== Implicit Intent

.ActivityDemo.java
[source,java]
----
...
startService(new Intent("marakana.intent.action.IntentServiceDemo"));
...
sendBroadcast(new Intent("marakana.intent.action.ReceiverDemo"));
...
----

Requires that there's an intent filter filtering for this particular intent, for example:

.AndroidManifest.xml
[source,xml]
----
...
<service android:name=".IntentServiceDemo">
  <intent-filter>
    <action android:name="marakana.intent.action.IntentServiceDemo" />
  </intent-filter>
</service>
...
<receiver android:name=".ReceiverDemo">
  <intent-filter>
    <action android:name="marakana.intent.action.ReceiverDemo" />
  </intent-filter>
</receiver>
...
----

Intent Filter
-------------

Intent filter is a way for us to assign certain action to an activity, service, receiver or similar.

Action is one of system defined actions, or something you come up with.

Intent filter typically goes into Android Manifest file, within `<activity>`, `<service>`, or `<receiver>` elements.

.Android Manifest file
[source,xml]
----
  ...
  <intent-filter>
    <action android:name="some.action.goes.here" />
  </intent-filter>
  ...
----

Action Bar
----------

The _action bar_, introduced in Honeycomb (API 11) is a title bar that includes:

* The application icon
* The activity title
* A set of user-selectable actions (optional)
* A set of user-selectable navigation modes (optional)

image::screens/actionbar-example.png["Action Bar"]

Enabling the Action Bar
-----------------------

Android automatically displays an action bar on an API 11+ system if the +<uses-sdk>+ element of your applications manifest:

* Sets +minSdkVersion+ to 11 or later, _or_
* Sets +targetSdkVersion+ to 11 or later

Either or these settings enable the "holographic look and feel" introduced in Honeycomb, which includes action bar support.

* If neither +minSdkVersion+ nor +targetSdkVersion+ are set to 11+, then an API 11+ system renders the app in a legacy theme, without action bar support.

With the action bar enabled, legacy option menu items appear automatically in the action bar's _overflow menu_. You reveal the overflow menu with:

* The hardware Menu button (if present), _or_
* An additional button in the action bar (for devices without a hardware Menu button)

Adding Action Items
-------------------

To display an option menu item as an action item, in the menu resource file add
+android:showAsAction="ifRoom"+ to the +<item>+ element.

* The device will display the item if there is room available in the action bar, otherwise the item appears in the overflow menu.

* Devices running API 10 or earlier ignore the +showAsAction+ attribute.

If your menu item supplies both a title and an icon, the action item shows only the icon by default.

* To display the text title, add +withText+ to the +android:showAsAction+ attribute. For example:

[source,xml]
----
<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:id="@+id/menu_save"
          android:icon="@drawable/ic_menu_save"
          android:title="@string/menu_save"
          android:showAsAction="ifRoom|withText" />
</menu>
----

NOTE: The +withText+ value is a hint to the action bar. The action bar will show the title if possible, but might not if an icon is available and the action bar is constrained for space.

ICS Split Action Bars
---------------------

API 14 introduced _split action bar_ support.

* Enabling split action bar allows a device with a narrow screen to display a separate action bar at the bottom of the screen containing all action items.

You enable split action bar in the manifest add +uiOptions="splitActionBarWhenNarrow"+:

* To an +<activity>+ element to enable split action bar for that activity, or

* To the +<application>+ element to enable split action bar for all activities

NOTE: Devices on API 13 or earlier ignore the +uiOptions+ attribute.

Using the App Icon for Navigation
---------------------------------

You can enable the application icon -- which appears in the action bar on the left side -- to behave as an action item. If enabled, your app should respond by:

* Going to the application "home" activity, or
* Navigating "up" the application's structural hierarchy

When the user taps the app icon, the system calls your activity's +onOptionsItemSelected()+ method. The +MenuItem+ passed as an argument has an ID of +android.R.id.home+.

[NOTE]
====
The app icon was enabled by default in APIs 11-13. API 14 disables it be default. To enable it in API 14 or later:

[source, java]
----
if (Build.VERSION.SDK_INT > Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
	getActionBar().setHomeButtonEnabled(true);
}
----

====


Part 3 - Services
-----------------

.Yamba Part 3
image::images/Yamba/Yamba-3.svg[]


Service Overview
----------------
.Example of a Service
image::images/Service.svg[align="center"]

* Services are code that runs in the background. 
* They can be started and stopped. Services doesn’t have UI.
* Keep in mind that service runs on the main application thread, the UI thread.

Service Lifecycle
-----------------
.Service Lifecycle
image::images/ServiceLifecycle.png[align="center"]

* Service starts and "runs" until it gets a request to stop.
* Service will run on the main UI thread.
* To offload work from main thread, use intent service.
* Intent service uses worker thread, stops when done with work.
* Services can be bound or unbound.

Service Lifecycle Explored
--------------------------

[options="incremental"]
.Starting a service first time
----
D/ServiceDemo( 7623): onCreate
D/ServiceDemo( 7623): onStartCommand
----

[options="incremental"]
.Restarting the same service
----
...
D/ServiceDemo( 7623): onStartCommand
----

[options="incremental"]
.Stopping the service
----
...
D/ServiceDemo( 7623): onDestroy
----

[options="incremental"]
.Starting the intent service
----
D/IntentServiceDemo( 7748): onCreate
D/IntentServiceDemo( 7748): onHandleIntent for action: marakana.intent.action.IntentServiceDemo
D/IntentServiceDemo( 7748): onDestroy
----

Service Template
----------------

.ServiceDemo.java
[source,java]
----
include::code/LifecycleDemo/src/com/marakana/android/lifecycle/ServiceDemo.java[]
----

IntentService Template
----------------------

.IntentServiceDemo.java
[source,java]
----
include::code/LifecycleDemo/src/com/marakana/android/lifecycle/IntentServiceDemo.java[]
----

Service Callbacks
-----------------

`onBind()`::
Required, but for unbound services, we just return `null`.

`onCreate()`::
Called when service is first created.

`onStartCommand()`::
Called is called every time service is started.

`onDestroy()`::
Called when service is stopped. It is subsequently destroyed.


IntentService Callbacks
-----------------------

Constructor::
It needs to pass the name of this service to its `super`.

`onCreate()`::
Called when service is first created.

`onHandleIntent()`::
This is where the work of the service runs.

`onDestroy()`::
Called when service is stopped. It is subsequently destroyed.


Registering Service
-------------------

.Registering a service that will be called explicitly by its class name
[source,xml]
----
...
<service android:name=".ServiceDemo"></service>
...
----

.Registering a service that will be called via action
[source,xml]
----
...
<service android:name=".IntentServiceDemo">
  <intent-filter>
    <action android:name="marakana.intent.action.IntentServiceDemo" />
  </intent-filter>
</service>
...
----



Part 4 - Content Providers
--------------------------

.Yamba Part 4
image::images/Yamba/Yamba-4.svg[]


Content Provider Overview
-------------------------
.Example of Content Provider
image::images/ContentProvider.png[]

* Content Providers share content with applications across application boundaries.
* Examples of built-in Content Providers are: 
** Contacts
** MediaStore
** Settings and more.

Typical Usage of Content Providers
----------------------------------
.Typical Usage of Content Providers
image::images/ContentProviderUsage.svg[]

Content Provider Lifecycle
--------------------------
.Content Provider Lifecycle
image::images/ContentProviderLifecycle.png[align="center"]

* Content provider is initiated first time it is used via a call to `onCreate()`.
* There is no callback for cleaning up after the provider.
* When modifying the data (insert/update/delete), open/close database atomically.
* When reading the data, leave database open or else the data will get garbage collected.

Content Provider Template
-------------------------

.ProviderDemo.java
[source,java]
----
include::code/LifecycleDemo/src/com/marakana/android/lifecycle/ProviderDemo.java[]
----

Content Provider Callbacks
--------------------------

`onCreate()`::
Used to initialize this content provider. This method runs on UI thread, so should be quick. Good place to instantiate database helper, if using database.

`getType()`::
Returns the mime time for the given uri. Typically, this MIME type will either be something like `vnd.android.cursor.item/vnd.marakana.android.lifecycle.status` for a single item or `vnd.android.cursor.dir/vnd.marakana.android.lifecycle.status` for multiple items.

`insert()`::
Inserts the values into the provider returning uri that points to the newly inserted record.

`update()`::
Updates records(s) specified by either the uri or `selection`/`selectionArgs` combo. Returns number of records affected.

`delete()`::
Deletes records(s) specified by either the uri or `selection`/`selectionArgs` combo. Returns number of records affected.

`query()`::
Queries the provider for the record(s) specified by either uri or`selection`/`selectionArgs`/`grouping`/`having` combo.


Registering Content Provider
----------------------------

.Registering in Android Manifest file
[source,xml]
----
...
<provider
     android:name=".ProviderDemo"
     android:authorities="com.marakana.android.lifecycle.providerdemo" />
...
----

The authority of this provider must match the uri authority that this provider is responding to.




Part 5 - Lists and Adapters
---------------------------

.Yamba Part 5
image::images/Yamba/Yamba-5.svg[]

Lists and Adapters Overview
---------------------------

.Lists and Adapters Overview
image::images/Adapter.png[]

Adapters connect potentially large data sets to small views


Fragments
---------
.Fragments
image::images/Fragments.svg[]

So, What's a Fragment?
----------------------

A _fragment_ is a class implementing a portion of an activity.

* A fragment represents a particular operation or interface running within a larger activity.

* Fragments enable more modular activity design, making it easier to adapt an application to different screen orientations and multiple screen sizes.

* Fragments must be embedded in activities; they cannot run independent of activities.

* Most fragments define their own layout of views that live within the activity's view hierarchy.

** However, a fragment can implement a behavior that has no user interface component.

* A fragment has its own lifecycle, closely related to the lifecycle of its host activity.

* A fragment can be a static part of an activity, instantiated automatically during the activity's creation.

* Or, you can create, add, and remove fragments dynamically in an activity at run-time.


Loaders
-------

Loaders make it easy to load data asynchronously in an activity or fragment. Loaders have these characteristics:

* They are available to every Activity and Fragment.
* They provide asynchronous loading of data.
* They monitor the source of their data and deliver new results when the content changes.
* They automatically reconnect to the last loader's cursor when being recreated after a configuration change. Thus, they don't need to re-query their data.

Loaders were introduced in Honeycomb (API 11).

* The Android Support Package includes support for loaders. By including the support package in your application, you can use loaders even if your application for a +minSdkVersion+ of 4 or later.


Using Loaders in an Application
-------------------------------

An application that uses loaders typically includes the following:

* An +Activity+ or +Fragment+.

* An instance of the +LoaderManager+.

* A +CursorLoader+ to load data backed by a +ContentProvider+. Alternatively, you can implement your own subclass of +Loader+ or +AsyncTaskLoader+ to load data from some other source.

* A data source, such as a +ContentProvider+, when using a +CursorLoader+.

* An implementation for +LoaderManager.LoaderCallbacks+. This is where you create new loader instances and manage your references to existing loaders.

* A way of displaying the loader's data, such as a +SimpleCursorAdapter+.

Availability of Fragments and Loaders
-------------------------------------

=== Fragments: Implemented in Honeycomb (3.0) or Later

Fragments were added to the Android API in Honeycomb, API 11.

The primary classes related to fragments are:

+android.app.Fragment+::
The base class for all fragment definitions
+android.app.FragmentManager+::
The class for interacting with fragment objects inside an activity
+android.app.FragmentTransaction+::
The class for performing an atomic set of fragment operations

=== Fragments: Implemented in Donut (1.6) or Later

Google provides the _Compatibility Package_, a Java library that you can include in an application, implementing support for fragments and other Honeycomb features (loaders).


Part 6 - Broadcast Receivers
----------------------------
.Yamba Part 6
image::images/Yamba/Yamba-6.svg[]

Broadcast Receiver Overview
---------------------------
.Broadcast Receiver Lifecycle
image::images/BroadcastReceiver.png[align="center"]

* An Intent-based publish-subscribe mechanism. 
* Great for listening system events such as SMS messages.

Broadcast Receiver Template
---------------------------

.ReceiverDemo.java
[source,java]
----
include::code/LifecycleDemo/src/com/marakana/android/lifecycle/ReceiverDemo.java[]
----


Receiver Lifecycle Explained
----------------------------

.Sending a broadcast to a receiver
----
D/ReceiverDemo( 7964): onReceive action: marakana.intent.action.ReceiverDemo
----


Broadcast Receiver Callbacks
----------------------------

`onReceive()`::
This is the only method you typically care about for a broadcast receiver. It is called when this receiver is invoked.


Registering Broadcast Receiver
------------------------------

.Registering in Android Manifest file
[source,xml]
----
<receiver android:name=".ReceiverDemo">
  <intent-filter>
    <action android:name="marakana.intent.action.ReceiverDemo" />
  </intent-filter>
</receiver>
----

.Registering programmatically
[source,java]
----
...
@Override
protected void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  ...
  // Create the receiver
  receiver = new TimelineReceiver();
  filter = new IntentFilter( UpdaterService.NEW_STATUS_INTENT );
}

protected void onResume() {
  super.onResume();
  super.registerReceiver(receiver, filter,
      "com.marakana.yamba.SEND_TIMELINE_NOTIFICATIONS", null);
}

@Override
protected void onPause() {
  super.onPause();
  unregisterReceiver(receiver); 
}
...
----



Part 7 - App Widgets
--------------------

.Yamba Part 7
image::images/Yamba/Yamba-7.svg[]

App Widgets Overview
--------------------

* App widgets are miniature views that can live in other apps, such as Home app.
* They are a special implementation of Broadcast Receivers.

=== Declaring an App Widget

Widgets are essentially Broadcast Receivers

.Yamba App Widget registration in AndroidManifest.xml
[source,xml]
----
<receiver
    android:name=".YambaWidget"
    android:label="@string/app_name" >
    <intent-filter>
        <action android:name="com.marakana.broadcast.NEW_STATUS" />
    </intent-filter>

    <intent-filter>
        <action android:name="android.appwidget.action.APPWIDGET_UPDATE" />
    </intent-filter>
    <meta-data
        android:name="android.appwidget.provider"
        android:resource="@xml/widget" />
</receiver>
----

=== Specifying Meta Data

Meta data specifies the default size of the widget, plus the update period.

.Yamba Widget meta data
[source,xml]
----
<?xml version="1.0" encoding="utf-8"?>
<appwidget-provider xmlns:android="http://schemas.android.com/apk/res/android"
    android:minHeight="72dp"
    android:minWidth="294dp"
    android:updatePeriodMillis="10000" >
</appwidget-provider>
----

Implementing App Widget
-----------------------

[source,java]
----
package com.marakana.android.yamba;

...

public class YambaWidget extends AppWidgetProvider {
	private static final String TAG = YambaWidget.class.getSimpleName();

	@Override
	public void onReceive(Context context, Intent intent) {
		super.onReceive(context, intent);
		if (intent.getAction().equals(YambaApp.NEW_STATUS_BROADCAST)) {
			AppWidgetManager appWidgetManager = AppWidgetManager
					.getInstance(context);
			this.onUpdate(context, appWidgetManager, appWidgetManager
					.getAppWidgetIds(new ComponentName(context,
							YambaWidget.class)));
			Log.d(TAG, "onReceived");
		}
	}

	@Override
	public void onUpdate(Context context, AppWidgetManager appWidgetManager,
			int[] appWidgetIds) {
		super.onUpdate(context, appWidgetManager, appWidgetIds);

		// Get the data
		Cursor cursor = context.getContentResolver().query(
				StatusProvider.CONTENT_URI, null, null, null,
				StatusData.SORT_BY);

		// Do we have any data?
		if (cursor!=null && cursor.moveToFirst()) {
			String user = cursor.getString(cursor
					.getColumnIndex(StatusData.C_USER));
			String text = cursor.getString(cursor
					.getColumnIndex(StatusData.C_TEXT));

			// Loop thru all the widget instances
			for (int appWidgetId : appWidgetIds) {
				RemoteViews views = new RemoteViews(context.getPackageName(),
						R.layout.row);
				views.setTextViewText(R.id.text_user, user);
				views.setTextViewText(R.id.text_text, text);
				views.setTextViewText(R.id.text_createdAt, "");
				appWidgetManager.updateAppWidget(appWidgetId, views);
			}
		}
		Log.d(TAG, "onUpdated");
	}

}
----

Yamba App Widget Output
-----------------------
.Yamba App Widget Output
image::screens/YambaAppWidget.png[]


Quiz
----

. Name four main Android app building blocks.
. What is an activity?
. Name major callback methods of an activity.
. What is a service?
. Name major callback methods of a service.
. What is a broadcast receiver?
. Name major callback methods of a broadcast receiver.
. What is a content provider?
. Name major callback methods of a content provider.
. What does an Android app consist of?


Architecting Android Apps Summary
---------------------------------

This module was an introduction to main components that make up an app. By now, you should know of activities, services, providers and receivers as well as intents and other major components of an app.


