= Coursebook Structure
include::attributes.asc[]

== Directory Structure

Each class' coursebook should be stored in a separate directory in Marakana's +courseware+ Subversion project. The coursebook directory should have the following contents:

+book.asc+::
The main book file, used to include all other book files.

__++fileName++__++.asc++::
A separate file for each course *module*. In rare cases, an especially long module may by split into multiple files, in which case all such files should be included into a top-level module file.
+
TIP: In general, modules that long should be avoided, as it would tend to indicate too much content for presentation as a single module. Consider re-designing that section of the course into a set of smaller, more focused modules if possible.
+
A module is part of a book. It requires to be part of a flow.

+attributes.asc+::
A file containing document attributes, included in the book file and each module file.

+docinfo.html+::
A set of HTML `<head>` elements that are added to the generated HTML files. This is used to supplement the set of `<head>` elements generated automatically by `asciidoc`.

+docinfo.xml+::
A set of XML DocBook elements containing the frontmatter for the coursebook. This is used to generate the PDF version of the book.

+images/+::	A directory containing all images included in the coursebook aside from common images stored in the +common+ courseware directory in Subversion.

+code/+::	A directory containing all code samples included in the coursebook.

== The `book.asc` Book File Structure

The `book.asc` file serves primarily as a container for including the other course module files. It also defines various attributes used to format the book.

=== The Book Header

The `book.asc` should start with a _header_, consisting of a set of lines much like this:

----
= Courseware Title Training
ifdef::format[]
:doctitle: Courseware Title Tutorial
endif::[]
Ford Prefect <ford.prefect@marakana.com>
v0.1, 11-Dec-2010
:leveloffset:	1
:docinfo1:
:doctype:	book
\include::attributes.asc[]
----

The title line should be a "Level 0" header, as indicated by the single `=`. If the "format" attribute has been defined when calling the asciidoc command, then the title will be changed. Finally comes the primary author, version, and revision date information.

NOTE: Each time a course is updated, remember to update the version number and (final) revision date. This helps ensure that outdated materials are not used in class.

The `leveloffset` attribute increases the "indentation level" of sections in included files. For example, a Level 1 heading in an included file is treated as a Level 2 heading. This allows us to process individual modules for slideshow presentation with the proper section levels required by those tools (that is, Level 1 sections becoming individual slides), and still maintain the proper outline structure for print production.

The `docinfo1` attribute should be present, but does not require a value. It instructs AsciiDoc to include the `docinfo.xml` and `docinfo.html` meta information files for DocBook and HTML output generation, respectively.

The `doctype` attribute of "book" instructs the AsciiDoc toolchain to generate PDF output in a two-sided book format.

The included `attributes.asc` file contains additional document attributes that need to apply both to the entire coursebook when generating PDF output and to individual modules when generating slide output. Therefore, individual course modules also include this `attributes.asc` file independently.

=== The Book Preamble

AsciiDoc allows an optional untitled section body, known as a _preamble_, to be present between the document header and the first section title. Marakana coursebooks should not include a book preamble.

=== The Book Sections

Following the header, each course module should be included in order with a block `include` directive, as in:

----
\include::structure.asc[]
----

TIP: Include a blank line after each `include` directive to ensure the title of the subsequent included document is not seen as part of the last paragraph of the previous document.

Any section that serves as an appendix, such as <<installation_instructions,installation and setup instructions>>, should be proceeded by an `[appendix]` attribute, as in:

----
[appendix]
\include::installation.asc[]
----

== The Document Information Files

There are two document information files that should be provided for each coursebook: +docinfo.html+ and +docinfo.xml+.

=== The `docinfo.html` File

The +docinfo.html+ file provides a set of HTML `<head>` elements that are added to the generated HTML files. This is used to supplement the set of `<head>` elements generated automatically by `asciidoc`.

// TODO: Provide required and recommended elements and values

=== The `docinfo.xml` File

The +docinfo.xml+ file provides a set of XML DocBook elements containing the frontmatter for the coursebook. This information includes the copyright notice and other legal information, which is then included in the PDF output.

// TODO: Provide required and recommended elements and values

== The `attributes.asc` File

The included +attributes.asc+ file contains additional document attributes that need to apply both to the entire coursebook when generating PDF output and to individual modules when generating slide output.

The following attributes and values are recommended for Marakana courses:

`copyright`::
The copyright year(s), the copyright owner, and the phrase "All rights reserved." This attribute becomes a `<meta>` tag in the HTML generated for Slidy, and Slidy also presents the information in a footer on each slide.

`miscellaneous.tabsize`::
The number of space characters to be used for tab expansion. `4` is the recommended value.

Therefore a standard +attributes.asc+ file would contain the following (with the date adjusted as appropriate):

----
:copyright:  2010 Markana, Inc. All rights reserved.
:miscellaneous.tabsize:  4
----

== The Module File Structure

Each course module should appear in a separate file. The file should have a descriptive basename and an `.asc` extension.

TIP: The Marakana TextMate bundle includes a New File template for creating a new module file. Select +File => New From Template => Marakana => New Marakana AsciiDoc Course Module+.

=== The Module Header

The module file should start with a _header_, consisting of a set of lines much like this:

----
= Lemur Husbandry
\include::attributes.asc[]
----

The title line should be a "Level 0" header, as indicated by the single `=`.

The included `attributes.asc` file contains additional document attributes that need to apply both to the entire coursebook when generating PDF output and to individual modules when generating slide output. Therefore, individual course modules also include this `attributes.asc` file independently. Any attributes explicitly required by this module should be set after including this file.

=== The Module Preamble

AsciiDoc allows an optional untitled section body, known as a _preamble_, to be present between the document header and the first section title. Each module should have a preamble consisting of an outline of topics covered in the module.

This preamble appears on the first page of the PDF output for the module. For a Slidy presentation, it appears as a separate slide following the title slide.

=== Slide Structure

Each course slide should have the following basic structure, replacing the +TODO+ notes with actual content:

----
== Slide Title

// TODO: Slide content goes here

[role="handout"]
--
'''

// TODO: Student notes content goes here

--
----

The slide title should be a "Level 1" header, as indicated by a double `==`.

TIP: The Marakana TextMate bundle includes a tab trigger to insert a new slide. Type `slide` followed by the Tab key.

==== Main Slide Content

The main slide content will be the only slide content visible in a Slidy presentation of the course. The primary concepts of this slide should appear here in bullet form.

==== Slide Notes

The two `--` lines delimit what AsciiDoc refers to as an "open block," which is used to group a set of block elements but otherwise provides no special formatting. When generating HTML output, AsciiDoc wraps the content of an open block in a `<div>` element. The `[role="handout"]` attribute preceding the block becomes an HTML class applied to the `<div>`. The `'''` line provides a horizontal rule separating the main slide content from the notes.

The AsciiDoc toolchain renders the slide notes normally for the PDF output. On the other hand, Slidy hides all `<div>` elements that have a "handout" class.

If no student notes are required for a particular slide, the lines from `[role="handout"]` through the end may be omitted.

=== Module Review

Try to include a review slide at the end of the module summarizing key points covered. Don't simple repeat the outline from the beginning of the module. Instead, try to provide concrete information, such as:

====
* You must terminate each Java statement with a semicolon (;).
* A Tcl dictionary is an ordered collection of key-value pairs.
====

=== Labs

Try to include at least one hands-on lab at the end of each module. For longer modules, consider labs at intermediate points as well.

A lab should be presented as a slide. The slide body should have a brief summary of the lab. The notes section of the slide should go into more detail to guide the students in the lab.

The lab instructions should not be a list of explicit steps for the students to follow. A lab should require students to apply the knowledge that they gained during the module. More detailed instructions may be required to guide students through obscure steps of the lab (e.g., directing them to specific menus or dialogs), and explicit steps might be required on occasion if some aspect of the lab was not covered in class or is tangential to the main class subject matter (e.g., expanding tarballs or setting file permissions), could result in lost data, or could require extensive time and effort to recover from a mis-step.

=== Exercises and Quizzes

// TODO: Write guidelines
To be written

== Other Coursebook Sections

[[installation_instructions]]
=== Installation and Configuration Sections

Unless software installation and configuration are covered as in-class activities, they should be documented in an appendix.

In the Marakana `courseware` Subversion project, the `common/installation` directory contains installation and configuration instructions for common software packages used in the courses. In your installation appendix, simply +include+ as many of these files as needed for the class.

Whenever possible, new installation instructions should be provided as a new `common/installation` file so that it can be reused in other courses. The content should be simple book text, not presentation slides. The top-level title should be a "Level 1" header, as indicated by a double `==`. The installation and configuration process should be presented as a numbered set of tasks. Make the instructions concrete and specific as much as possible, to avoid student mistakes. If the installation and configuration procedure has variations, such as different steps to follow on Linux vs Windows, clearly differentiate between the variations. If differences are minor, present them as alternatives to specific steps. If they are major, include each installation procedure in a separate section.

// TODO: Determine any document attributes that should be included in the stand-alone file, especially for the production of a independent document that is sent to clients before class.

// TODO: Determine a naming convention for the installation files. Most likely include version number, as the instructions for a single version of a product might change over time as we refine the process.


=== Glossary of Terms

Consider whether students would benefit from a glossary. If so, provide it as a separate file included in the `book.asc` after all appendices. The structure of the file should be:

----
[glossary]
= Glossary of Terms
\include::attributes.asc[]

[glossary]
A term::
Its definition

Another term::
Its definition

...
----

=== Resource List

The last module should be a list of resources. Include books, web sites, and any other applicable resources. In general try to follow the _Chicago Manual of Style_ format for bibliographic entries. However, there is no need to get overly formal following the style; especially for web resources, the Chicago and other formats can be overly complex, so feel free to simplify.

TIP: The site http://www.bibme.org[BibMe] offers a free service for compiling bibliographic entries. It allows searching for books by title, author, ISBN, etc. and automatically filling out most of the bibliographic information. Be careful, though, as it sometimes mis-parses some of the information. It's safest to check the publication information against the http://catalog.loc.gov[Library of Congress Online Catalog].

== Images

All images required for the course should be included in an `images/` subdirectory. Images used in multiple courses, such as the Marakana logo, should go in the `common/images` directory in Marakana's `courseware` Subversion project.

Where possible, images should be in PNG format. JPG or GIF format may also be used. When creating images using a tool with a different native file format (such as OmniGraffle), provide the native source for the image as well.

// TODO: Determine recommendations for image sizing
To be written

== Code Files

// TODO: Determine recommendations for example code
To be written

== Lab Files

// TODO: Determine recommendations for lab files
To be written
