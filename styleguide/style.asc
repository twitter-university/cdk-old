= Formatting and Style

// TODO: Provide an outline of the module

== Typographical Conventions

// TODO: Include information on recommended styles

In AsciiDoc, you format text by _quoting_ it within what AsciiDoc refers to as quote characters.

There are actually two kinds of quotes:

Constrained quotes::
Quotes must be bounded by white space or commonly adjoining punctuation characters. These are the most commonly used type of quote.

Unconstrained quotes::
Unconstrained quotes have no boundary constraints and can be placed anywhere within inline text. Unconstrained quotes are double-ups of the `_`, `*`, `+` and `#` constrained quotes. For example `**N**ew` renders as **N**ew.

Keep in mind:

* Quoting cannot be overlapped.

* Different quoting types can be nested.

* To suppress quoted text formatting place a backslash character immediately in front of the leading quote character(s). In the case of ambiguity between escaped and non-escaped text you will need to escape both leading and trailing quotes, in the case of multi-character quotes you may even need to escape individual characters.

=== Italicized Text

Italicize text by quoting it with \'single quotes' or \_underscores_. Generally prefer using underscores over quotes, but use whichever is most convenient. If the italicized text does not begin or end at a word boundary, use the unconstrained version, with two `__under__score` characters quoting the text.

Explicitly italicize the following content:

Glossary term first use::
In AsciiDoc, you format text by _quoting_ it.

=== Bold Text

Format text as bold text by quoting it with \*asterisks*. If the bold text does not begin or end at a word boundary, use the unconstrained version, with two `**aster**isk` characters quoting the text.

Explicitly format in bold the following content:

Emphasized text::
Make *emphasized* text bold.

=== Monospaced Text

Format text as monospaced text by quoting it with \`back quotes` or \+plus+ characters. If the monospaced text does not begin or end at a word boundary, use the unconstrained version, with two `++pl++us` characters quoting the text.

NOTE: The back-quote technique for producing monospace text also disables all other quote expansion within the text. This is typically used for literal text such as code that might include other AsciiDoc significant characters.

Explicitly format in monospace text the following content:

Class names::
Create a subclass of the +Activity+ class.

Method and function names::
The `toString()` method returns a printable representation. Invoke `myObj.getLength()` to obtain the length.

Field and variable names::
Set +name+ to "Ken Jones".

Language keywords::
+while+ executes the loop statement if the condition evaluates to +true+.

Menu names, menu items, window and dialog field names::
Display the +File+ menu and select +Save+. Enter your name in the +Name+ field of the dialog.

File and directory paths::
Install the application into `/opt/local`. The `images` directory contains PNG and JPG images.

HTML and XML elements and attributes::
Provide a reasonable value for the +alt+ attribute of your `<img>` tags.

=== Parameterized Literal Text

Sometimes, a portion of literal text needs a parameter or placeholder value. Ideally, the parameter or placeholder should be rendered in italicized monospace text. Unfortunately, AsciiDoc does not make this easy, especially if the parameter or placeholder does not begin and end at word boundaries. In that situation, you must use the "unbounded" version of the italics quotes.

Complicating matters further, the DocBook DTD does not allow any formatted text to occur within literal text spans. In essence, this HTML equivalent is not valid in DocBook: `<tt>MyApp_<i>version</i>.exe</tt>`. The `asciidoc` tool does not complain, but the `a2x` tool aborts when the `xmllint` application detects the invalid structure.

NOTE: You can disable the `xmllint` step by providing the `a2x -L` option. However, you should not use this hack, as it could hide other structural errors in your document.

You can work around this limitation by using an obvious placeholder, like `XXX` or `VERSION` in the literal, and call out the replacement in the explanatory text. Otherwise, at the point you need the parameter or placeholder:

. Turn off literal text
. Turn on italics
. Turn on literal text
. Write the placeholder text
. Turn off literal text
. Turn off italics
. Turn on literal text

For example, `++MyApp_++__++version++__++.exe++` renders as ++MyApp_++__++version++__++.exe++. Yuck.

Examples of parameterized literal text include:

Version numbers::
Download ++MyApp_++__++version++__++.zip++ to your local system.

File or directory names::
The file should go in the ++workspace/++__++projectName++__++/src++ directory

=== URLs

AsciiDoc automatically creates a hyperlink when it encounters a URL. Type display link text other than the URL, append it to the URL enclosed in `[]` characters, as in `http://www.marakana.com[Marakana]`, which produces http://www.marakana.com[Marakana].

=== Quoted Text

Aside from the typical use of quotation characters in English, use quotation marks around literal strings in the following situations in normal text:

Text a user enters into a field on window or dialog::
Type "Ken Jones" in the `Name` field.

Text a user enters at a command-line prompt::
Enter "San Francisco" at the `City:` prompt.

Literal strings to be used in code::
Assign "Ken Jones" to the +name+ variable.

== User Interface Documentation

=== Windows and Dialogs

Use literal text format (monospace formatting) for:

* Window and dialog titles
* Window and dialog field names

Use quoted text (quotation marks) for literal text a user should enter into a field.

=== Menus

Use literal text format (monospace formatting) for menu names and menu items. To indicate a sequence of selecting an item from a menu, separate the menu from the menu item with a `=>`. For example:

* The text `+File=>Save+` produces +File=>Save+
* The text `+Text=>Align=>Left+` produces +Text=>Align=>Left+

=== Command Line Interaction

When illustrating a sequence of command line interactions, use an AsciiDoc _listing block_ (delimited by lines containing at least four `-` characters). The commands typed by the user should appear in bold monospace, which requires enabling quote substitutions within the listing block.

For example, the following code:

....
[subs="quotes"]
----
$ *ls*
one.txt two.txt two.txt.bak
$ *rm *.bak*
$ *ls*
one.txt two.txt
----
....

produces this output:

[subs="quotes"]
----
$ *ls*
one.txt two.txt two.txt.bak
$ *rm *.bak*
$ *ls*
one.txt two.txt
----

== Code Examples

For code examples, use and AsciiDoc _listing block_ (delimited by lines containing at least 4 `-` characters). The listing block should be preceded by a `[source]` attribute identifying the programming language for syntax highlighting. For example:

....
[source,tcl]
----
set a 3
set b 4
set c [expr { sqrt( $a*$a + $b*$b)}]
----
....

which produces this output:

[source,tcl]
----
set a 3
set b 4
set c [expr { sqrt( $a*$a + $b*$b) }]
----

When code is available in an external source file and you want to include the entire content of the file as an example, use the `include` directive within the listing block, as in:

....
[source,java]
----
\include::code/MyClass.java[]
----
....

TIP: The Marakana TextMate bundle includes a drag-and-drop shortcut. You can select any file in the TextMate Project Drawer or in the Mac OS Finder, and drag it to the desired include location in your file. The drag-and-drop shortcut automatically inserts an appropriate `include` directive for the file. Additionally, if the file is a recognized language type, as identified by its extension, the shortcut automatically adds the listing block syntax and a `[source]` attribute for that language.

Because a listing block is rendered with a border and background, a set of short code examples interspersed with text can appear visually cluttered. In that case, you can use a _literal block_ (delimited by lines containing at least 4 `.` characters), which renders its contents in a monospace font but without a border or background. For example:

 ....
 set a 3
 set b 4
 ....

produces the output:

....
set a 3
set b 4
....

An alternative to using a literal block, especially for a single line, is to use a _literal paragraph_, which is a paragraph where the first line is indented by one or more space or tab characters.

For example, the line:

....
  set a 3
....

produces the output:

	set a 3


== Tables

// TODO: Create some guidelines for tables
To be written

WARNING: Don't use the +literal+ or +monospace+ column types (i.e., in the +cols+ attribute). I noticed weird rendering artifacts for both, especially when generating PDF. The row heights were unnecessarily tall, and cell contents sometimes were misaligned.

== Images

The `image` directive includes a reference to an image to include in the document. The syntax is:

	image:pathName[attributes]   // Inline image
	image::pathName[attributes]  // Block image

TIP: The Marakana TextMate bundle includes a drag-and-drop shortcut. You can select any image file in the TextMate Project Drawer or in the Mac OS Finder, and drag it to the desired include location in your file. The drag-and-drop shortcut automatically inserts an appropriate `image::` directive for the file. If you want the image as an inline rather than block image, simply delete one of the `:` characters.

=== Inline vs Block Images

AsciiDoc supports both "inline" and "block" images.

Inline images::
An inline image does not cause a line break. It can appear anywhere within a paragraph or table. Use `image:` to include an inline image.

Block images::
A block image causes a line break at the point of insertion. It is roughly equivalent to a paragraph in terms of the document structure. It must be contained in a single line separated on each side by a blank line or a block delimiter. Use `image::` to include a block image.

=== Image Attributes

All image attributes are optional in AsciiDoc. Within the `[]`, you can provide a comma-separated list of __++attribute++__++=++__++value++__ pairs. Optionally, the first attribute can be a simple string value, in which case it is used as the value for the +alt+ attribute.

See the AsciiDoc documentation for a complete list of supported attributes. The following are attributes typically used in Marakana courses:

alt::
Alternative text which is displayed if the output application is unable to display the image file.
+
NOTE: In general, you should always provide a value for the +alt+ attribute.

title::
A title for the image. The block image renders the title alongside the image. The inline image displays the title as a popup “tooltip” in visual browsers.

height::
width::
HTML: A size expressed as a number of pixels. DocBook: A size expressed as a measurement, such as "2in". If you specify only one of these attributes, the image is scaled proportionally. If you specify both, the image may be stretched to fit the space.

align::
One of `center`, `left`, or `right`. Mutually exclusive with the `float` attribute.

float::
HTML only: One of `left` or `right`, floating the image on the page. Use the `unfloat::[]` block macro to stop floating.

=== Specifying Separate Attributes for HTML and DocBook

Getting an image to appear properly in both HTML and DocBook/PDF output formats can be challenging. For example, you might want to specifying a different size for HTML vs PDF production. Or you might want to display a title for PDF output, but not for HTML.

AsciiDoc supports conditional macros. Within the conditional section, you can include output text and other AsciiDoc directives. A simpler, condensed conditional syntax is also available for one-line conditional inclusion. See the AsciiDoc documentation for complete information on using conditional directives.

One condition that can be tested is the _basebackend_, which is the toolchain used to produce output. For the purpose of producing HTML, such as Slidy slides, then `basebackend-html` is defined. For the purpose of producing PDF, then `basebackend-docbook` is defined. This allows us to specify different sets of attributes for each target output.

The following is an example of exploiting this feature:

....
\ifdef::basebackend-docbook[[width="2in",title="Compiling and running a Java program"]]
\ifdef::basebackend-html[[float="left",width="250"]]
image::images/HelloWorld-CompileRun.png["Compiling and running a Java program"]
// Some content
unfloat::[]
....

In this case, the image `images/HelloWorld-CompileRun.png` is included as a block image, with an +alt+ value of "Compiling and running a Java program". When generating PDF, the image will be scaled to 2 inches wide and be displayed with a title of "Compiling and running a Java program". When generating HTML, the image will be scaled to 250 pixels wide and float on the left side of the page. Text will wrap around the image until reaching the `unfloat::[]` directive.
